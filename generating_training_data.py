import psycopg2
import json
from utils import *

# step 1: generate training data

# set the following variables:
path_to_queries = "data/JOB-light/queries.txt"
# this is the file of training queries

conn = psycopg2.connect("dbname=imdb user=postgres")
# connects to the specified Postgres database, as the specified user 

write_plans_to_this_dir = "data/JOB-light/postgres_plans/"
# saving the results generated by this file (training plans)
# there will be n files, where n is the number of queries
# each file correspondes to a particular query, and contains all plans of the query

# code begins here
conn.autocommit = True
cur = conn.cursor()
cur.execute("SET max_parallel_workers_per_gather = 0; commit;")

plan_lists = []

init_start_line = 0
num_queries = 10000


# default plan
read_file = open(path_to_queries, 'r')
counter = 0
for _ in range(init_start_line + counter):
    read_file.readline()

while True:
    try:
        line = read_file.readline()
        if not line:
            break
        # if counter % 1 == 0:
        #     print(0,counter)
        counter+=1
        cur.execute("EXPLAIN (FORMAT JSON)" + line)
        analyze_fetched = cur.fetchall()
        results = analyze_fetched[0][0][0]
        cost = results["Plan"]["Total Cost"]
        cur.execute("EXPLAIN (ANALYZE TRUE, FORMAT JSON) " + line)
        analyze_fetched = cur.fetchall()
        plan = analyze_fetched[0][0]
        write_file = open(write_plans_to_this_dir + str(counter) + '.txt', 'a')
        json.dump(plan, write_file)
        write_file.write('\n')
        write_file.close()
    except:
        a=1


for c in ["SET enable_seqscan = OFF", "SET enable_bitmapscan = OFF", "SET enable_indexscan = OFF", "SET enable_indexonlyscan = OFF"]:
    cur.execute(c)
for c in ["SET enable_hashjoin = OFF", "SET enable_mergejoin = OFF", "SET enable_nestloop = OFF"]:
    cur.execute(c)
for i in range(0,len(hints)):
    for s in hints[i]:
        cur.execute("SET enable_" + s + " = ON")
    read_file = open(path_to_queries, 'r')
    counter = 0
    
    while True:
        try:
            line = read_file.readline()
            if not line:
                break
            # if counter % 1 == 0:
            #     print(i+1,counter)
            counter+=1
            cur.execute("EXPLAIN (FORMAT JSON)" + line)
            analyze_fetched = cur.fetchall()
            results = analyze_fetched[0][0][0]
            cost = results["Plan"]["Total Cost"]

            all_plans_file = open(write_plans_to_this_dir + str(counter) + '.txt', 'r')
            all_plans = all_plans_file.readlines()
            all_plans_file.close()
            plan_executed = False
            for a_plan in all_plans:
                parsed_plan = json.loads(a_plan)
                cost_of_plan = parsed_plan[0]['Plan']['Total Cost']
                if cost_of_plan == cost:
                    plan_executed = True
                    break
            if plan_executed:
                continue
            
            cur.execute("EXPLAIN (ANALYZE TRUE, FORMAT JSON) " + line)
            analyze_fetched = cur.fetchall()
            plan = analyze_fetched[0][0]
            write_file = open(write_plans_to_this_dir + str(counter) + '.txt', 'a')
            json.dump(plan, write_file)
            write_file.write('\n')
            write_file.close()
        except:
            a=1
    for s in hints[i]:
        cur.execute("SET enable_" + s + " = OFF")